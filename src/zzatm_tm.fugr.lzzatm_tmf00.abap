*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 11/24/2020 at 19:40:39
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZZATM_GAMES_V...................................*
FORM GET_DATA_ZZATM_GAMES_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZZATM_GAMES WHERE
(VIM_WHERETAB) .
    CLEAR ZZATM_GAMES_V .
ZZATM_GAMES_V-MANDT =
ZZATM_GAMES-MANDT .
ZZATM_GAMES_V-NAME =
ZZATM_GAMES-NAME .
ZZATM_GAMES_V-GAME =
ZZATM_GAMES-GAME .
ZZATM_GAMES_V-GAMET =
ZZATM_GAMES-GAMET .
ZZATM_GAMES_V-MODEL =
ZZATM_GAMES-MODEL .
ZZATM_GAMES_V-PROB_MATCH =
ZZATM_GAMES-PROB_MATCH .
ZZATM_GAMES_V-START_DELAY =
ZZATM_GAMES-START_DELAY .
ZZATM_GAMES_V-NEXT_DELAY =
ZZATM_GAMES-NEXT_DELAY .
<VIM_TOTAL_STRUC> = ZZATM_GAMES_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZZATM_GAMES_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZZATM_GAMES_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZZATM_GAMES_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZZATM_GAMES WHERE
  NAME = ZZATM_GAMES_V-NAME AND
  GAME = ZZATM_GAMES_V-GAME .
    IF SY-SUBRC = 0.
    DELETE ZZATM_GAMES .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZZATM_GAMES WHERE
  NAME = ZZATM_GAMES_V-NAME AND
  GAME = ZZATM_GAMES_V-GAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZZATM_GAMES.
    ENDIF.
ZZATM_GAMES-MANDT =
ZZATM_GAMES_V-MANDT .
ZZATM_GAMES-NAME =
ZZATM_GAMES_V-NAME .
ZZATM_GAMES-GAME =
ZZATM_GAMES_V-GAME .
ZZATM_GAMES-GAMET =
ZZATM_GAMES_V-GAMET .
ZZATM_GAMES-MODEL =
ZZATM_GAMES_V-MODEL .
ZZATM_GAMES-PROB_MATCH =
ZZATM_GAMES_V-PROB_MATCH .
ZZATM_GAMES-START_DELAY =
ZZATM_GAMES_V-START_DELAY .
ZZATM_GAMES-NEXT_DELAY =
ZZATM_GAMES_V-NEXT_DELAY .
    IF SY-SUBRC = 0.
    UPDATE ZZATM_GAMES ##WARN_OK.
    ELSE.
    INSERT ZZATM_GAMES .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZZATM_GAMES_V-UPD_FLAG,
STATUS_ZZATM_GAMES_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZZATM_GAMES_V.
  SELECT SINGLE * FROM ZZATM_GAMES WHERE
NAME = ZZATM_GAMES_V-NAME AND
GAME = ZZATM_GAMES_V-GAME .
ZZATM_GAMES_V-MANDT =
ZZATM_GAMES-MANDT .
ZZATM_GAMES_V-NAME =
ZZATM_GAMES-NAME .
ZZATM_GAMES_V-GAME =
ZZATM_GAMES-GAME .
ZZATM_GAMES_V-GAMET =
ZZATM_GAMES-GAMET .
ZZATM_GAMES_V-MODEL =
ZZATM_GAMES-MODEL .
ZZATM_GAMES_V-PROB_MATCH =
ZZATM_GAMES-PROB_MATCH .
ZZATM_GAMES_V-START_DELAY =
ZZATM_GAMES-START_DELAY .
ZZATM_GAMES_V-NEXT_DELAY =
ZZATM_GAMES-NEXT_DELAY .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZZATM_GAMES_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZZATM_GAMES_V-NAME TO
ZZATM_GAMES-NAME .
MOVE ZZATM_GAMES_V-GAME TO
ZZATM_GAMES-GAME .
MOVE ZZATM_GAMES_V-MANDT TO
ZZATM_GAMES-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZZATM_GAMES'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZZATM_GAMES TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZZATM_GAMES'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZZATM_PLAYERS_V.................................*
FORM GET_DATA_ZZATM_PLAYERS_V.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZZATM_PLAYERS WHERE
(VIM_WHERETAB) .
    CLEAR ZZATM_PLAYERS_V .
ZZATM_PLAYERS_V-MANDT =
ZZATM_PLAYERS-MANDT .
ZZATM_PLAYERS_V-NAME =
ZZATM_PLAYERS-NAME .
ZZATM_PLAYERS_V-PPIC =
ZZATM_PLAYERS-PPIC .
ZZATM_PLAYERS_V-GSOUND =
ZZATM_PLAYERS-GSOUND .
ZZATM_PLAYERS_V-SSOUND =
ZZATM_PLAYERS-SSOUND .
ZZATM_PLAYERS_V-ESOUND =
ZZATM_PLAYERS-ESOUND .
ZZATM_PLAYERS_V-CSOUND =
ZZATM_PLAYERS-CSOUND .
ZZATM_PLAYERS_V-WSOUND =
ZZATM_PLAYERS-WSOUND .
ZZATM_PLAYERS_V-DEBUG =
ZZATM_PLAYERS-DEBUG .
<VIM_TOTAL_STRUC> = ZZATM_PLAYERS_V.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZZATM_PLAYERS_V .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZZATM_PLAYERS_V.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZZATM_PLAYERS_V-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZZATM_PLAYERS WHERE
  NAME = ZZATM_PLAYERS_V-NAME .
    IF SY-SUBRC = 0.
    DELETE ZZATM_PLAYERS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZZATM_PLAYERS WHERE
  NAME = ZZATM_PLAYERS_V-NAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZZATM_PLAYERS.
    ENDIF.
ZZATM_PLAYERS-MANDT =
ZZATM_PLAYERS_V-MANDT .
ZZATM_PLAYERS-NAME =
ZZATM_PLAYERS_V-NAME .
ZZATM_PLAYERS-PPIC =
ZZATM_PLAYERS_V-PPIC .
ZZATM_PLAYERS-GSOUND =
ZZATM_PLAYERS_V-GSOUND .
ZZATM_PLAYERS-SSOUND =
ZZATM_PLAYERS_V-SSOUND .
ZZATM_PLAYERS-ESOUND =
ZZATM_PLAYERS_V-ESOUND .
ZZATM_PLAYERS-CSOUND =
ZZATM_PLAYERS_V-CSOUND .
ZZATM_PLAYERS-WSOUND =
ZZATM_PLAYERS_V-WSOUND .
ZZATM_PLAYERS-DEBUG =
ZZATM_PLAYERS_V-DEBUG .
    IF SY-SUBRC = 0.
    UPDATE ZZATM_PLAYERS ##WARN_OK.
    ELSE.
    INSERT ZZATM_PLAYERS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZZATM_PLAYERS_V-UPD_FLAG,
STATUS_ZZATM_PLAYERS_V-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZZATM_PLAYERS_V.
  SELECT SINGLE * FROM ZZATM_PLAYERS WHERE
NAME = ZZATM_PLAYERS_V-NAME .
ZZATM_PLAYERS_V-MANDT =
ZZATM_PLAYERS-MANDT .
ZZATM_PLAYERS_V-NAME =
ZZATM_PLAYERS-NAME .
ZZATM_PLAYERS_V-PPIC =
ZZATM_PLAYERS-PPIC .
ZZATM_PLAYERS_V-GSOUND =
ZZATM_PLAYERS-GSOUND .
ZZATM_PLAYERS_V-SSOUND =
ZZATM_PLAYERS-SSOUND .
ZZATM_PLAYERS_V-ESOUND =
ZZATM_PLAYERS-ESOUND .
ZZATM_PLAYERS_V-CSOUND =
ZZATM_PLAYERS-CSOUND .
ZZATM_PLAYERS_V-WSOUND =
ZZATM_PLAYERS-WSOUND .
ZZATM_PLAYERS_V-DEBUG =
ZZATM_PLAYERS-DEBUG .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZZATM_PLAYERS_V USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZZATM_PLAYERS_V-NAME TO
ZZATM_PLAYERS-NAME .
MOVE ZZATM_PLAYERS_V-MANDT TO
ZZATM_PLAYERS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZZATM_PLAYERS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZZATM_PLAYERS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZZATM_PLAYERS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZZATM_QUESTIONSV................................*
FORM GET_DATA_ZZATM_QUESTIONSV.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZZATM_QUESTIONS WHERE
(VIM_WHERETAB) .
    CLEAR ZZATM_QUESTIONSV .
ZZATM_QUESTIONSV-MANDT =
ZZATM_QUESTIONS-MANDT .
ZZATM_QUESTIONSV-NAME =
ZZATM_QUESTIONS-NAME .
ZZATM_QUESTIONSV-GAME =
ZZATM_QUESTIONS-GAME .
ZZATM_QUESTIONSV-ARRAY_IDX =
ZZATM_QUESTIONS-ARRAY_IDX .
ZZATM_QUESTIONSV-IMAGE_URL =
ZZATM_QUESTIONS-IMAGE_URL .
<VIM_TOTAL_STRUC> = ZZATM_QUESTIONSV.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZZATM_QUESTIONSV .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZZATM_QUESTIONSV.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZZATM_QUESTIONSV-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZZATM_QUESTIONS WHERE
  NAME = ZZATM_QUESTIONSV-NAME AND
  GAME = ZZATM_QUESTIONSV-GAME AND
  ARRAY_IDX = ZZATM_QUESTIONSV-ARRAY_IDX .
    IF SY-SUBRC = 0.
    DELETE ZZATM_QUESTIONS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZZATM_QUESTIONS WHERE
  NAME = ZZATM_QUESTIONSV-NAME AND
  GAME = ZZATM_QUESTIONSV-GAME AND
  ARRAY_IDX = ZZATM_QUESTIONSV-ARRAY_IDX .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZZATM_QUESTIONS.
    ENDIF.
ZZATM_QUESTIONS-MANDT =
ZZATM_QUESTIONSV-MANDT .
ZZATM_QUESTIONS-NAME =
ZZATM_QUESTIONSV-NAME .
ZZATM_QUESTIONS-GAME =
ZZATM_QUESTIONSV-GAME .
ZZATM_QUESTIONS-ARRAY_IDX =
ZZATM_QUESTIONSV-ARRAY_IDX .
ZZATM_QUESTIONS-IMAGE_URL =
ZZATM_QUESTIONSV-IMAGE_URL .
    IF SY-SUBRC = 0.
    UPDATE ZZATM_QUESTIONS ##WARN_OK.
    ELSE.
    INSERT ZZATM_QUESTIONS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZZATM_QUESTIONSV-UPD_FLAG,
STATUS_ZZATM_QUESTIONSV-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZZATM_QUESTIONSV.
  SELECT SINGLE * FROM ZZATM_QUESTIONS WHERE
NAME = ZZATM_QUESTIONSV-NAME AND
GAME = ZZATM_QUESTIONSV-GAME AND
ARRAY_IDX = ZZATM_QUESTIONSV-ARRAY_IDX .
ZZATM_QUESTIONSV-MANDT =
ZZATM_QUESTIONS-MANDT .
ZZATM_QUESTIONSV-NAME =
ZZATM_QUESTIONS-NAME .
ZZATM_QUESTIONSV-GAME =
ZZATM_QUESTIONS-GAME .
ZZATM_QUESTIONSV-ARRAY_IDX =
ZZATM_QUESTIONS-ARRAY_IDX .
ZZATM_QUESTIONSV-IMAGE_URL =
ZZATM_QUESTIONS-IMAGE_URL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZZATM_QUESTIONSV USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZZATM_QUESTIONSV-NAME TO
ZZATM_QUESTIONS-NAME .
MOVE ZZATM_QUESTIONSV-GAME TO
ZZATM_QUESTIONS-GAME .
MOVE ZZATM_QUESTIONSV-ARRAY_IDX TO
ZZATM_QUESTIONS-ARRAY_IDX .
MOVE ZZATM_QUESTIONSV-MANDT TO
ZZATM_QUESTIONS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZZATM_QUESTIONS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZZATM_QUESTIONS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZZATM_QUESTIONS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
